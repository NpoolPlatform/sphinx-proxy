// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/message/npool/sphinxplugin"
	"github.com/NpoolPlatform/sphinx-plugin/pkg/plugin/eth"
	"github.com/NpoolPlatform/sphinx-proxy/pkg/db/ent/transaction"
	"github.com/google/uuid"
)

// TransactionCreate is the builder for creating a Transaction entity.
type TransactionCreate struct {
	config
	mutation *TransactionMutation
	hooks    []Hook
}

// SetNonce sets the "nonce" field.
func (tc *TransactionCreate) SetNonce(u uint64) *TransactionCreate {
	tc.mutation.SetNonce(u)
	return tc
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableNonce(u *uint64) *TransactionCreate {
	if u != nil {
		tc.SetNonce(*u)
	}
	return tc
}

// SetUtxo sets the "utxo" field.
func (tc *TransactionCreate) SetUtxo(s []*sphinxplugin.Unspent) *TransactionCreate {
	tc.mutation.SetUtxo(s)
	return tc
}

// SetPre sets the "pre" field.
func (tc *TransactionCreate) SetPre(esi *eth.PreSignInfo) *TransactionCreate {
	tc.mutation.SetPre(esi)
	return tc
}

// SetTransactionType sets the "transaction_type" field.
func (tc *TransactionCreate) SetTransactionType(i int8) *TransactionCreate {
	tc.mutation.SetTransactionType(i)
	return tc
}

// SetNillableTransactionType sets the "transaction_type" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableTransactionType(i *int8) *TransactionCreate {
	if i != nil {
		tc.SetTransactionType(*i)
	}
	return tc
}

// SetCoinType sets the "coin_type" field.
func (tc *TransactionCreate) SetCoinType(i int32) *TransactionCreate {
	tc.mutation.SetCoinType(i)
	return tc
}

// SetNillableCoinType sets the "coin_type" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableCoinType(i *int32) *TransactionCreate {
	if i != nil {
		tc.SetCoinType(*i)
	}
	return tc
}

// SetTransactionID sets the "transaction_id" field.
func (tc *TransactionCreate) SetTransactionID(s string) *TransactionCreate {
	tc.mutation.SetTransactionID(s)
	return tc
}

// SetRecentBhash sets the "recent_bhash" field.
func (tc *TransactionCreate) SetRecentBhash(s string) *TransactionCreate {
	tc.mutation.SetRecentBhash(s)
	return tc
}

// SetNillableRecentBhash sets the "recent_bhash" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableRecentBhash(s *string) *TransactionCreate {
	if s != nil {
		tc.SetRecentBhash(*s)
	}
	return tc
}

// SetTxData sets the "tx_data" field.
func (tc *TransactionCreate) SetTxData(b []byte) *TransactionCreate {
	tc.mutation.SetTxData(b)
	return tc
}

// SetCid sets the "cid" field.
func (tc *TransactionCreate) SetCid(s string) *TransactionCreate {
	tc.mutation.SetCid(s)
	return tc
}

// SetNillableCid sets the "cid" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableCid(s *string) *TransactionCreate {
	if s != nil {
		tc.SetCid(*s)
	}
	return tc
}

// SetExitCode sets the "exit_code" field.
func (tc *TransactionCreate) SetExitCode(i int64) *TransactionCreate {
	tc.mutation.SetExitCode(i)
	return tc
}

// SetNillableExitCode sets the "exit_code" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableExitCode(i *int64) *TransactionCreate {
	if i != nil {
		tc.SetExitCode(*i)
	}
	return tc
}

// SetFrom sets the "from" field.
func (tc *TransactionCreate) SetFrom(s string) *TransactionCreate {
	tc.mutation.SetFrom(s)
	return tc
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableFrom(s *string) *TransactionCreate {
	if s != nil {
		tc.SetFrom(*s)
	}
	return tc
}

// SetTo sets the "to" field.
func (tc *TransactionCreate) SetTo(s string) *TransactionCreate {
	tc.mutation.SetTo(s)
	return tc
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableTo(s *string) *TransactionCreate {
	if s != nil {
		tc.SetTo(*s)
	}
	return tc
}

// SetAmount sets the "amount" field.
func (tc *TransactionCreate) SetAmount(u uint64) *TransactionCreate {
	tc.mutation.SetAmount(u)
	return tc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableAmount(u *uint64) *TransactionCreate {
	if u != nil {
		tc.SetAmount(*u)
	}
	return tc
}

// SetState sets the "state" field.
func (tc *TransactionCreate) SetState(u uint8) *TransactionCreate {
	tc.mutation.SetState(u)
	return tc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableState(u *uint8) *TransactionCreate {
	if u != nil {
		tc.SetState(*u)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TransactionCreate) SetCreatedAt(u uint32) *TransactionCreate {
	tc.mutation.SetCreatedAt(u)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableCreatedAt(u *uint32) *TransactionCreate {
	if u != nil {
		tc.SetCreatedAt(*u)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TransactionCreate) SetUpdatedAt(u uint32) *TransactionCreate {
	tc.mutation.SetUpdatedAt(u)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableUpdatedAt(u *uint32) *TransactionCreate {
	if u != nil {
		tc.SetUpdatedAt(*u)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TransactionCreate) SetDeletedAt(u uint32) *TransactionCreate {
	tc.mutation.SetDeletedAt(u)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableDeletedAt(u *uint32) *TransactionCreate {
	if u != nil {
		tc.SetDeletedAt(*u)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TransactionCreate) SetID(u uuid.UUID) *TransactionCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableID(u *uuid.UUID) *TransactionCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// Mutation returns the TransactionMutation object of the builder.
func (tc *TransactionCreate) Mutation() *TransactionMutation {
	return tc.mutation
}

// Save creates the Transaction in the database.
func (tc *TransactionCreate) Save(ctx context.Context) (*Transaction, error) {
	var (
		err  error
		node *Transaction
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransactionCreate) SaveX(ctx context.Context) *Transaction {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransactionCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransactionCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TransactionCreate) defaults() {
	if _, ok := tc.mutation.Nonce(); !ok {
		v := transaction.DefaultNonce
		tc.mutation.SetNonce(v)
	}
	if _, ok := tc.mutation.Utxo(); !ok {
		v := transaction.DefaultUtxo
		tc.mutation.SetUtxo(v)
	}
	if _, ok := tc.mutation.Pre(); !ok {
		v := transaction.DefaultPre
		tc.mutation.SetPre(v)
	}
	if _, ok := tc.mutation.TransactionType(); !ok {
		v := transaction.DefaultTransactionType
		tc.mutation.SetTransactionType(v)
	}
	if _, ok := tc.mutation.CoinType(); !ok {
		v := transaction.DefaultCoinType
		tc.mutation.SetCoinType(v)
	}
	if _, ok := tc.mutation.RecentBhash(); !ok {
		v := transaction.DefaultRecentBhash
		tc.mutation.SetRecentBhash(v)
	}
	if _, ok := tc.mutation.TxData(); !ok {
		v := transaction.DefaultTxData
		tc.mutation.SetTxData(v)
	}
	if _, ok := tc.mutation.Cid(); !ok {
		v := transaction.DefaultCid
		tc.mutation.SetCid(v)
	}
	if _, ok := tc.mutation.ExitCode(); !ok {
		v := transaction.DefaultExitCode
		tc.mutation.SetExitCode(v)
	}
	if _, ok := tc.mutation.From(); !ok {
		v := transaction.DefaultFrom
		tc.mutation.SetFrom(v)
	}
	if _, ok := tc.mutation.To(); !ok {
		v := transaction.DefaultTo
		tc.mutation.SetTo(v)
	}
	if _, ok := tc.mutation.Amount(); !ok {
		v := transaction.DefaultAmount
		tc.mutation.SetAmount(v)
	}
	if _, ok := tc.mutation.State(); !ok {
		v := transaction.DefaultState
		tc.mutation.SetState(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := transaction.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := transaction.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.DeletedAt(); !ok {
		v := transaction.DefaultDeletedAt()
		tc.mutation.SetDeletedAt(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := transaction.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransactionCreate) check() error {
	if _, ok := tc.mutation.Nonce(); !ok {
		return &ValidationError{Name: "nonce", err: errors.New(`ent: missing required field "Transaction.nonce"`)}
	}
	if _, ok := tc.mutation.Utxo(); !ok {
		return &ValidationError{Name: "utxo", err: errors.New(`ent: missing required field "Transaction.utxo"`)}
	}
	if _, ok := tc.mutation.Pre(); !ok {
		return &ValidationError{Name: "pre", err: errors.New(`ent: missing required field "Transaction.pre"`)}
	}
	if _, ok := tc.mutation.TransactionType(); !ok {
		return &ValidationError{Name: "transaction_type", err: errors.New(`ent: missing required field "Transaction.transaction_type"`)}
	}
	if _, ok := tc.mutation.CoinType(); !ok {
		return &ValidationError{Name: "coin_type", err: errors.New(`ent: missing required field "Transaction.coin_type"`)}
	}
	if _, ok := tc.mutation.TransactionID(); !ok {
		return &ValidationError{Name: "transaction_id", err: errors.New(`ent: missing required field "Transaction.transaction_id"`)}
	}
	if v, ok := tc.mutation.TransactionID(); ok {
		if err := transaction.TransactionIDValidator(v); err != nil {
			return &ValidationError{Name: "transaction_id", err: fmt.Errorf(`ent: validator failed for field "Transaction.transaction_id": %w`, err)}
		}
	}
	if _, ok := tc.mutation.RecentBhash(); !ok {
		return &ValidationError{Name: "recent_bhash", err: errors.New(`ent: missing required field "Transaction.recent_bhash"`)}
	}
	if _, ok := tc.mutation.TxData(); !ok {
		return &ValidationError{Name: "tx_data", err: errors.New(`ent: missing required field "Transaction.tx_data"`)}
	}
	if _, ok := tc.mutation.Cid(); !ok {
		return &ValidationError{Name: "cid", err: errors.New(`ent: missing required field "Transaction.cid"`)}
	}
	if _, ok := tc.mutation.ExitCode(); !ok {
		return &ValidationError{Name: "exit_code", err: errors.New(`ent: missing required field "Transaction.exit_code"`)}
	}
	if _, ok := tc.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required field "Transaction.from"`)}
	}
	if v, ok := tc.mutation.From(); ok {
		if err := transaction.FromValidator(v); err != nil {
			return &ValidationError{Name: "from", err: fmt.Errorf(`ent: validator failed for field "Transaction.from": %w`, err)}
		}
	}
	if _, ok := tc.mutation.To(); !ok {
		return &ValidationError{Name: "to", err: errors.New(`ent: missing required field "Transaction.to"`)}
	}
	if v, ok := tc.mutation.To(); ok {
		if err := transaction.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`ent: validator failed for field "Transaction.to": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Transaction.amount"`)}
	}
	if v, ok := tc.mutation.Amount(); ok {
		if err := transaction.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Transaction.amount": %w`, err)}
		}
	}
	if _, ok := tc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Transaction.state"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Transaction.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Transaction.updated_at"`)}
	}
	if _, ok := tc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Transaction.deleted_at"`)}
	}
	return nil
}

func (tc *TransactionCreate) sqlSave(ctx context.Context) (*Transaction, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tc *TransactionCreate) createSpec() (*Transaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Transaction{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: transaction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: transaction.FieldID,
			},
		}
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.Nonce(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transaction.FieldNonce,
		})
		_node.Nonce = value
	}
	if value, ok := tc.mutation.Utxo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: transaction.FieldUtxo,
		})
		_node.Utxo = value
	}
	if value, ok := tc.mutation.Pre(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: transaction.FieldPre,
		})
		_node.Pre = value
	}
	if value, ok := tc.mutation.TransactionType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: transaction.FieldTransactionType,
		})
		_node.TransactionType = value
	}
	if value, ok := tc.mutation.CoinType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: transaction.FieldCoinType,
		})
		_node.CoinType = value
	}
	if value, ok := tc.mutation.TransactionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldTransactionID,
		})
		_node.TransactionID = value
	}
	if value, ok := tc.mutation.RecentBhash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldRecentBhash,
		})
		_node.RecentBhash = value
	}
	if value, ok := tc.mutation.TxData(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: transaction.FieldTxData,
		})
		_node.TxData = value
	}
	if value, ok := tc.mutation.Cid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldCid,
		})
		_node.Cid = value
	}
	if value, ok := tc.mutation.ExitCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: transaction.FieldExitCode,
		})
		_node.ExitCode = value
	}
	if value, ok := tc.mutation.From(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldFrom,
		})
		_node.From = value
	}
	if value, ok := tc.mutation.To(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldTo,
		})
		_node.To = value
	}
	if value, ok := tc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: transaction.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := tc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: transaction.FieldState,
		})
		_node.State = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: transaction.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	return _node, _spec
}

// TransactionCreateBulk is the builder for creating many Transaction entities in bulk.
type TransactionCreateBulk struct {
	config
	builders []*TransactionCreate
}

// Save creates the Transaction entities in the database.
func (tcb *TransactionCreateBulk) Save(ctx context.Context) ([]*Transaction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transaction, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransactionCreateBulk) SaveX(ctx context.Context) []*Transaction {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransactionCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
